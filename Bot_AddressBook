from collections import UserDict, defaultdict
from datetime import datetime, timedelta


class Field: # Base class for record fields
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field): # for storing the name of a contact
    def __init__(self, name):
        super().__init__(name)
    

class Phone(Field): # for storing a phone number
    def __init__(self, phone):
        if self.validation(phone):
            self.phone = phone
    
    def validation(self, phone):
        return phone.isdigit() and len(phone) == 10
    

class Birthday(Field): # for colleagues' birthday
    def __init__(self, birthday):
        if self.validation(birthday):
            self.birthday = birthday

    def validation(self, birthday):
        datetime.strptime(birthday, '%d.%m.%Y')
        return True


class Record: # for storing information about a contact
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []

    def __str__(self):
        return f"Contact name: {self.name.name}, phones: {'; '.join(p.phone for p in self.phones)}"

    def add_phone(self, phone):
        phone = Phone(phone)
        phone.validation()
        self.phones.append(phone)
        
    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)
    
    def show_birthday(self):
        return str(self.birthday)

    def show_upcoming_birthdays(self):
        return AddressBook.get_birthdays_per_week()
        
    def remove_phone(self, phone):
        for p in self.phones:
            if p.phone == phone:
                self.phones.remove(p)
                break

    def edit_phone(self, old_phone, edit_phone):
        for p in self.phones:
            if p.phone == old_phone:
                p.phone = edit_phone
                p.validation()
                break

    def find_phone(self, number):
        for phone in self.phones:
            if phone.phone == number:
                return phone.phone
        return None


class AddressBook(UserDict): # for storing and managing records.
    def __init__(self, value):
        self.value = value

    def add_record(self, record): # create dictionary "data" (class Record, class Name, value name)
        self.data[record.name.name] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_birthdays_per_week(users):
    
        def sorted_by_month_day(users): # sorted list users and write days in correct order
            return sorted(users, key=lambda x: datetime.strptime(x["birthday"].strftime('%m-%d'), '%m-%d'))

        def get_sorted_birthdays_per_week(users): # creation function for getting birthdays
            today = datetime.today().date()

            birthday_per_week = defaultdict(list)

            for user in users:
                name = user["name"]
                birthday = user["birthday"].date()
                birthday_this_year = birthday.replace(year=today.year)

                if birthday_this_year < today:
                    birthday_this_year = birthday_this_year.replace(year=today.year + 1)

                delta_days = (birthday_this_year - today).days

                if delta_days < 7:
                    if delta_days == 0:
                        day_of_week = "Today"
                    elif delta_days == 1:
                        day_of_week = "Tomorrow"
                    else:
                        if (today + timedelta(days=delta_days)).weekday() >= 5:
                            day_of_week = "Monday"
                        else:
                            day_of_week = (today + timedelta(days=delta_days)).strftime('%A')
                        birthday_per_week[day_of_week].append(name)

            return birthday_per_week

        return get_sorted_birthdays_per_week(sorted_by_month_day(users))



def parse_input(user_input):
    """The function takes a string of user input, breaks it into words.
It returns the first word as the command cmd and the rest as a list of arguments *args.
Next, it removes extra spaces around the command and converts it to lower case."""
    command, *args = user_input.split()
    command = command.strip().lower()
    return command, *args


def main():
    """main function where everything happening"""
    contacts = {}
    print("\nðŸ’« Welcome to the assistant bot!ðŸŒŸ")

    while True:
        """this cycle will work until user not write command "close or exit"""
        print("""
        WRITE COMMAND:
            For example:
                - hello
                - add username phone
                - change username phone
                - phone username
                - add-birthday
                - show-birthday
                - birthdays
                - all
                - close or exit""")
        user_input = input("\nEnter a command:")
        command, *args = parse_input(user_input)
        
        if command in ["close", "exit"]:
            """these commands are letters' independed and for 
        each command call function which is written in the top"""
            print("Good bye!")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            print(record.add_phone(args))
        elif command == "change":
            print(record.edit_phone(args))
        elif command == "phone":
            print(record.add_phone(args))
        elif command == "add-birthday":
            print(record.add_birthday(args))
        elif command == "show-birthday":
            print(record.show_birthday(args))
        elif command == "birthdays":
            print(record.get_birthdays_per_week())
        elif command == "all":
            for record in record.data.values():
                print(record)
        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()
    