from collections import UserDict, defaultdict
from datetime import datetime, timedelta



class Field: # Base class for record fields
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field): # for storing the name of a contact
    def __init__(self, name):
        super().__init__(name)
    

class Phone(Field): # for storing a phone number
    def __init__(self, phone):
        if self.validation(phone):
            self.phone = phone
    
    def validation(self, phone):
        return phone.isdigit() and len(phone) == 10
    

class Birthday(Field): # for birthday of colleagues
    def __init__(self, birthday):
        if self.validation(birthday):
            self.birthday = birthday

    def validation(self, birthday):
        try:
            datetime.strptime(birthday, '%d.%m.%Y')
            return True
        except ValueError:
            return False


class Record: # for storing information about a contact
    def __init__(self, name, birthday=None):
        self.name = Name(name)
        self.phones = []
        self.birthday = birthday

    def __str__(self):
        return f"Contact name: {self.name.name}, phones: {'; '.join(p.phone for p in self.phones)}"

    def add_phone(self, phone):
        phone_obj = Phone(phone)
        if phone_obj.validation(phone):
            self.phones.append(phone_obj)
            print(f"Phone added for {self.name}: {phone}")
        else:
            print("Invalid phone number format. Please use a 10-digit number.")
        
    def add_birthday(self, birthday):
        try:
            self.birthday = Birthday(birthday)
            print(f"Birthday for {self.name.value} added: {self.birthday.birthday}")
        except ValueError:
            print("Invalid birthday format. Please use the format DD.MM.YYYY")

    def show_birthday(self):
        contact = self.data.get(self.name)
        if contact:
            return contact.show_birthday()
        else:
            return "Contact not found."
    
    def show_upcoming_birthdays(self):
        return AddressBook.get_birthdays_per_week()
        
    def remove_phone(self, phone):
        for p in self.phones:
            if p.phone == phone:
                self.phones.remove(p)
                break

    def edit_phone(self, old_phone, edit_phone):
        for phone in self.phones:
            if phone.phone == old_phone:
                phone.phone = edit_phone
                phone.validation(phone.phone)
                return f"Phone number for {self.name} changed to: {edit_phone}"
        return f"Phone number {old_phone} not found for {self.name}"

    def find_phone(self, number):
        for phone in self.phones:
            if phone.phone == number:
                return phone.phone
        return None


class AddressBook(UserDict): # for storing and managing records.
    def __init__(self):
        self.contacts = []

    def add_record(self, record): # create dictionary "data" (class Record, class Name, value name)
        self.contacts.append(record)

    def find(self, name):
        for contact in self.contacts:
            if contact.name == name:
                return contact
        return None

    def delete(self, name):
        for contact in self.contacts:
            if contact.name.name == name:
                self.contacts.remove(contact)
                break

    def get_birthdays_per_week(users):
    
        def sorted_by_month_day(users): # sorted list users and write days in correct order
            return sorted(users, key=lambda x: datetime.strptime(x["birthday"].strftime('%m-%d'), '%m-%d'))

        def get_sorted_birthdays_per_week(users): # creation function for getting birthdays
            today = datetime.today().date()

            birthday_per_week = defaultdict(list)

            for user in users:
                name = user["name"]
                birthday = user["birthday"].date()
                birthday_this_year = birthday.replace(year=today.year)

                if birthday_this_year < today:
                    birthday_this_year = birthday_this_year.replace(year=today.year + 1)

                delta_days = (birthday_this_year - today).days

                if delta_days < 7:
                    if delta_days == 0:
                        day_of_week = "Today"
                    elif delta_days == 1:
                        day_of_week = "Tomorrow"
                    else:
                        if (today + timedelta(days=delta_days)).weekday() >= 5:
                            day_of_week = "Monday"
                        else:
                            day_of_week = (today + timedelta(days=delta_days)).strftime('%A')
                        birthday_per_week[day_of_week].append(name)

            return birthday_per_week

        return get_sorted_birthdays_per_week(sorted_by_month_day(users))

new_book = AddressBook()

def parse_input(user_input):
    """The function takes a string of user input, breaks it into words.
It returns the first word as the command cmd and the rest as a list of arguments *args.
Next, it removes extra spaces around the command and converts it to lower case."""
    command, *args = user_input.split()
    command = command.strip().lower()
    return command, *args


def main():
    """main function where everything happening"""
    contacts = {}
    print("\nðŸ’« Welcome to the assistant bot!ðŸŒŸ")

    while True:
        """this cycle will work until user not write command "close or exit"""
        print("""
        WRITE COMMAND:
            For example:
                - hello
                - add username phone
                - change username phone
                - phone username
                - add-birthday
                - show-birthday
                - birthdays
                - all
                - close or exit""")
        user_input = input("\nEnter a command:")
        command, *args = parse_input(user_input)
        
        if command in ["close", "exit"]:
            """these commands are letters' independed and for 
        each command call function which is written in the top"""
            print("Good bye!")
            break
        elif command == "hello":
            print("How can I help you?")
        elif command == "add":
            record = Record(*args)
            new_book.add_record(record)
            record.add_phone(args[1])
        elif command == "change":
            if record:
                print(record.edit_phone(args[0], args[1]))
            else:
                print("No contact selected. Use 'add' command to add a contact first.")
        elif command == "phone":
            if new_book.contacts:
                record = new_book.contacts[0]
                if record:
                    if record.phones:
                        print(f"Phone number for {record.name.value}: {record.phones[0].phone}")
                    else:
                        print(f"No phone number found for {record.name.value}")
                else:
                    print("No contact selected. Use 'add' command to add a contact first.")
            else:
                print("No contacts available. Use 'add' command to add a contact first.")
        elif command == "add-birthday":
            if new_book.contacts:
                record = new_book.contacts[0]
                if record:
                    if len(args) == 2:
                        record.add_birthday(args[1])
                    else:
                        print("Invalid number of arguments. Use 'add-birthday [name] [birthday]'")
                else:
                    print("No contact selected. Use 'add' command to add a contact first.")
            else:
                print("No contacts available. Use 'add' command to add a contact first.")
        elif command == "show-birthday":
            contact = new_book.find(args[0])
            if contact:
                print(contact.show_birthday())
            else:
                print("Contact not found.")
        elif command == "birthdays":
            print(new_book.get_birthdays_per_week())
        elif command == "all":
            for record in new_book.values():
                print(record)
        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()
    